[
    {
        "title": "Psychic Game",
        "liveLink": "https://barrett4467.github.io/Psychic-Game/",
        "viewCode": "https://github.com/barrett4467/Psychic-Game",
        "image": "",
        "description": "Psychic Game is an application built using HTML, CSS and Javascript to create a game in which a random letter is selected. The player can make up to 10 guesses to reveal the current letter. If the letter is guessed before the player hits 10 guesses, the user will win the round.",
        "technology": ["HTML", "CSS", "Vanilla Javascript"]
    },
    {
        "title": "Crystal Collector",
        "liveLink": "https://barrett4467.github.io/Crystal-Collector/",
        "viewCode": "https://github.com/barrett4467/Crystal-Collector",
        "image": "",
        "description": "Crystal Collector is built using HTML, CSS and jQuery. You will be given a random number at the start of the game. There are four crystals below. By clicking on a crystal you will add a specific amount of points to your total score. You win the game by matching your total score to the score goal. But be careful, guesses too high will cause you to lose. The value of each crystal will not be apparent at the beginning. But by keeping a close eye on the score, you're sure to determine the value of each. Each time the game starts, the value of each crystal will change. Best of luck!!",
        "technology": ["HTML", "CSS", "jQuery"]
    },
    {
        "title": "Trivia Game",
        "liveLink": "https://barrett4467.github.io/Trivia-Game/",
        "viewCode": "https://github.com/barrett4467/Trivia-Game",
        "image": "",
        "description": "Trivia game is a Harry Potter trivia game built using HTML, CSS, and Javascript. The game allows the player to choose the answer from a bank of multiple choice answers within a 10 second time limit. If the player does not answer the question in time, the game will skip the question. At the end, the game reveals the correct answers for all questions.",
        "technology": ["HTML", "CSS", "jQuery"]
    },
    {
        "title": "Gif Tastic",
        "liveLink": "https://barrett4467.github.io/Gif-Tastic/",
        "viewCode": "https://github.com/barrett4467/Gif-Tastic",
        "image": "",
        "description": "Gif-Tastic is an application built on HTML and CSS that relies on ajax and jQuery to display gifs at the press of a button. The application reaches out to the giphy API and displays 10 results related to the button pressed. Users can add additional buttons by simply inputting a term into the search field. The gifs start paused, but when clicked, begin to play.",
        "technology": ["HTML", "CSS", "jQuery", "AJAX"]
    },
    {
        "title": "Train Tracker",
        "liveLink": "https://barrett4467.github.io/Train-Tracker/",
        "viewCode": "https://github.com/barrett4467/Train-Tracker",
        "image": "",
        "description": "Train-Tracker is a schedule application built using HTML and CSS that uses momentJS to show current train schedules. Users can input trains of their choosing without worrying that the data will be lost. The application stores data for each train input in a Firebase database.",
        "technology": ["HTML", "CSS", "jQuery", "Firebase"]
    },
    {
        "title": "Liri Node App",
        "liveLink": "https://drive.google.com/file/d/1uQ61o2Mp_WJMuDa9Ehsph7Ca_wHFwALf/view?usp=sharing",
        "viewCode": "https://github.com/barrett4467/Liri-Node-App",
        "image": "",
        "description": "Liri-node is an application built with node.js that utilizes inquire to ask a series of questions. The application starts by asking what the user would like to search for and provides a list of options including movie, song, concert and an option to be surprised. When the user selects one of the choices, the application then prompts the user to input a search term (either a song title, movie name, or artist) then uses axios to call the associated api and print the result to the screen. The application then asks the user if they would like to play again. In the event the user chooses 'surprise me', liri will use the random.txt file to provide a search term and randomly choose between the song, movie or concert data.",
        "technology": ["HTML", "CSS", "jQuery", "Node.js", "Axios"]
    },
    {
        "title": "Bamazon",
        "liveLink": "https://drive.google.com/file/d/1CyO8TgBivKB2sNhBwQfHLYXyWd78fGJO/view?usp=sharing",
        "viewCode": "https://github.com/barrett4467/Bamazon",
        "image": "",
        "description": "Bamazon is an application built on node.js that uses mysql to store data. The application is entirely run in the command line by a series of inquirer prompts. The customer level starts by displaying all available items to purchase in a table. The application then prompts the customer to enter the id of a product they'd like to purchase. Once the user has input a value, the application asks how many the user would like to purchase. The application then advised the user that the purchase was successful and logs their total. The available items table displays again with the updated stock. The app then asks if the user would like to purchase anything else. If the user selects yes, they will redo the steps above. If the user selects no, the application will disconnect from mysql and stop. The manager level uses the same database and table as the customer level. The application starts by asking the manager if they'd like to view the available products, view products with a low inventory, add to inventory, or add an entirely new product. If the manager selects view products, the application displays the items available in a table much like it did at the start of the customer level. If view low inventory is selected, the application will only display items with stock lower than 5 products. The add to inventory option works much the same as the purchasing in the customer level, but reversed. The last option, add new product, creates an entirely new product by asking the manager to input the name, department, price, and stock count. The application takes this input and updates the database before printing the updated product list to the console. All of the above options ask the manager if there's another task they'd like to do.",
        "technology": ["Node.js", "mySql"]
    },
    {
        "title": "Friend Finder",
        "liveLink": "https://sheltered-peak-24796.herokuapp.com/",
        "viewCode": "https://github.com/barrett4467/Friend-Finder",
        "image": "",
        "description": "Friend Finder is a monster themed application that takes a survey of random questions and returns the most compatible match. The application is built using Node.js and express. ",
        "technology": ["HTML", "CSS", "jQuery", "express"]
    },
    {
        "title": "Burger App",
        "liveLink": "https://mighty-taiga-82265.herokuapp.com/",
        "viewCode": "https://github.com/barrett4467/Burger",
        "image": "",
        "description": "Burger is a basic fullstack application built using MVC architecture. The application relies on an express server and uses handlebars. The Burger application toggles burgers between eaten or not eaten on the click of a button. Users can also add a new burger which is stored in a mySQL database.",
        "technology":     ["HTML", "CSS", "jQuery", "express", "mySql"]
    },
    {
        "title": "Recipe Scraper",
        "liveLink": "https://creepy-scarecrow-49319.herokuapp.com/",
        "viewCode": "https://github.com/barrett4467/Recipe-Scraper",
        "image": "",
        "description": "Recipe Scraper is an application built using axios to scrape allrecipes.com and store the information in a MongoDB database. Users can add notes and save recipes to view later. The application leverages Cheerio as well as mongoose.",
        "technology": ["HTML", "CSS", "jQuery", "Axios", "MongoDB"]
    },
    {
        "title": "Clicky Game",
        "liveLink": "https://shielded-crag-44459.herokuapp.com/",
        "viewCode": "https://github.com/barrett4467/Clicky-Game",
        "image": "",
        "description": "Clicky Game is an memory game built in React. The application shuffles the order of various cat photos with each click. The goal is to not click on the same cat photo twice.",
        "technology": ["React", "Styled Components", "Javascript"]
    },
    {
        "title": "Bearfoot Voyager",
        "liveLink": "https://barrett4467.github.io/Bearfoot-Voyager/",
        "viewCode": "https://github.com/barrett4467/Bearfoot-Voyager",
        "image": "",
        "description": "Bearfoot Voyager is an application that is designed to be used as a one stop shop for all travel needs. Once a user inputs a destination, the application searches several APIs to provide: news, weather, sports, breweries, and events local to the destination.",
        "technology": ["HTML", "CSS", "jQuery"]
    },
    {
        "title": "Fight Club",
        "liveLink": "https://shrouded-peak-73900.herokuapp.com/",
        "viewCode": "https://github.com/barrett4467/Project-2",
        "image": "",
        "description": "Fight club is an application that allows a player to select from 4 different fighters. The player is then matched with a randomized opponent and the battle commences. Scores are saved in a mySQL database.",
        "technology": ["Node.js", "mySql", "express", "handlebars", "passport", "CSS", "jQuery"]
    },
    {
        "title": "Zombies Need Brains",
        "liveLink": "https://lit-crag-22298.herokuapp.com/",
        "viewCode": "https://github.com/barrett4467/Zombies-Need-Brains",
        "image": "",
        "description": "Zombies Need Brains was designed to be an educational game for children that would provide practice math and spelling problems. Players have the option of multiple spelling games including a regular speller, plural practice, and fill-in-the-blank.",
        "technology": ["React", "Styled Components", "Node.js", "express", "MongoDB"]
    }
]